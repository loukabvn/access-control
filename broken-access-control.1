.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "BROKEN-ACCESS-CONTROL" "1" "12 Jun 2023" "v1.0" "Tool for testing access control - documentation"
.hy
.SH NAME
.PP
broken-access-control - script to test access control on a web app
during a pentest
.SH SYNOPSIS
.TP
broken-access-control [-h] [-c CONFIG] [\[en]login-path LOGIN_PATH] [\[en]id-field ID_FIELD]
.nf
\f[C]
               [--pwd-field PWD_FIELD] [--login-code LOGIN_CODE | --login-text LOGIN_TEXT] [--csrf]
\f[R]
.fi
.nf
\f[C]
               [--csrf-class CSRF_CLASS] [--csrf-name CSRF_NAME] [-o OUT] [-w WAIT]
\f[R]
.fi
.nf
\f[C]
               [--limit-users LIMIT_USERS] [--limit-urls LIMIT_URLS] [-m MAX_RETRIES] [-t TIMEOUT] [-p] [-v] [-j]
\f[R]
.fi
.nf
\f[C]
               [--allow-redirect] [--disable-unauth] [--disable-https]
\f[R]
.fi
.nf
\f[C]
               [host] [users] [urls]
\f[R]
.fi
.SH DESCRIPTION
.PP
With a given list of users and URLs and a host server, test all accesses
and store result as a table or in JSON format.
For the moment, this tool return only the HTTP status code of the
response.
Arguments can be specified from the command line or from a configuration
file (see: FILES).
.PP
The script will first send a GET request to all the URLs in the given
file without any authentication (unless \f[B]disable-unauth\f[R] is
set).
Then it will try to login to the application with the given parameters
(\f[B]login-path\f[R], \f[B]id-field\f[R], \f[B]pwd-field\f[R],
\f[B]login-code\f[R], \f[B]login-text\f[R]).
To authenticate the script send a POST request to the page given in
\f[B]login-path\f[R].
The payload is created with the \f[B]id-field\f[R] and
\f[B]pwd-field\f[R] parameters and with the values parsed from the CSV
file containing the users credentials (\f[B]users\f[R] parameters).
.PP
It\[cq]s possible to use a CSRF mechanism to connect as a classic user
do.
You must enable CSRF using with \f[B]csrf\f[R] parameter and then, you
can give the type of HTML tag which contains the CSRF token with
\f[B]csrf-class\f[R] and their name with \f[B]csrf-name\f[R].
.PP
\f[B]Example:\f[R]
.PP
With default parameters (see: OPTIONS), the following request will be
send for logging in:
.IP
.nf
\f[C]
POST /login HTTP/1.1
[... Headers ...]

email=user1&password=password1
\f[R]
.fi
.PP
And then, by default the script detect a valid login attempt with a HTTP
200 response, but you can change the status code, or detect a valid
authentication with a string in the response text.
By default, the tool does not follow redirections, for example, to
detect a valid authentication upon a 302 status code in HTTP response,
but you can enable the redirection.
.SH OPTIONS
.TP
-h, \[en]help
show help message and exit
.SS Load arguments from configuration file:
.TP
-c CONFIG, \[en]config CONFIG
configuration file to load arguments from, JSON format, override command
line arguments
.SS Required arguments without configuration file:
.TP
host
specify the target host
.TP
users
file containing the list of users
.TP
urls
file containing the list of URLs
.SS Login helper arguments:
.TP
\[en]login-path LOGIN_PATH
path to the login page of the application (default: /login)
.TP
\[en]id-field ID_FIELD
name of the id field in the request for login (default: email)
.TP
\[en]pwd-field PWD_FIELD
name of the password field in the request for login (default: password)
.TP
\[en]login-code LOGIN_CODE
status code upon a valid login request (default: 200)
.TP
\[en]login-text LOGIN_TEXT
text in the page upon a valid upon login request
.TP
\[en]csrf
enable use of a CSRF token for login (default: False)
.TP
\[en]csrf-class CSRF_CLASS
class of the CSRF token element in the login page (default: input)
.TP
\[en]csrf-name CSRF_NAME
name of the CSRF token element in the login page (default: csrf)
.SS Optional arguments:
.TP
-o OUT, \[en]out OUT
store the output in this file
.TP
-w WAIT, \[en]wait WAIT
waiting time to limit requests rate, in seconds (default: 1)
.TP
\[en]limit-users LIMIT_USERS
set the limit of users to test
.TP
\[en]limit-urls LIMIT_URLS
set the limit of URLs to test
.TP
-t TIMEOUT, \[en]timeout TIMEOUT
timeout for each HTTP request (default: 5)
.TP
-m MAX_RETRIES, \[en]max-retries MAX_RETRIES
max retries attempts if request failed (default: 3)
.TP
-p, \[en]proxy
enable use of proxy, for the moment: 127.0.0.1:8080 (default: False)
.TP
-v, \[en]verbose
see debug messages (default: False)
.TP
-j, \[en]json
save results in JSON format (default: False)
.TP
\[en]allow-redirect
follow requests redirection (default: False)
.TP
\[en]disable-unauth
disable unauthenticated tests (default: False)
.TP
\[en]disable-https
disable HTTPS (default: False)
.SH FILES
.SS Users file
.PP
The file containing the users credentials must fit the following format,
including \[lq]\f[V];\f[R]\[rq] delimiter:
.IP
.nf
\f[C]
role;username;password
user;johndoe;Password#123
administrator;admin;P\[at]ssw0rd456
\f[R]
.fi
.SS Configuration file
.PP
Parameters can be load from a configuration file.
Here is an example of this file :
.IP
.nf
\f[C]
{
  \[dq]host\[dq]: \[dq]example.domain.fr\[dq],
  \[dq]users\[dq]: \[dq]user.csv\[dq],
  \[dq]urls\[dq]: \[dq]url.txt\[dq],
  \[dq]login_path\[dq]: \[dq]/login\[dq],
  \[dq]id_field\[dq]: \[dq]email\[dq],
  \[dq]pwd_field\[dq]: \[dq]password\[dq],
  \[dq]login_code\[dq]: 200,
  \[dq]login_text\[dq]: null,
  \[dq]csrf\[dq]: false,
  \[dq]csrf_class\[dq]: \[dq]input\[dq],
  \[dq]csrf_name\[dq]: \[dq]csrf\[dq],
  \[dq]out\[dq]: null,
  \[dq]wait\[dq]: 1,
  \[dq]limit_users\[dq]: null,
  \[dq]limit_urls\[dq]: null,
  \[dq]max_retries\[dq]: 3,
  \[dq]proxy\[dq]: false,
  \[dq]verbose\[dq]: false,
  \[dq]json\[dq]: false,
  \[dq]disable_unauth\[dq]: false,
  \[dq]disable_https\[dq]: false
}
\f[R]
.fi
.SH TO DO
.IP \[bu] 2
Add possibility of test control access with POST requests with
parameters
.IP \[bu] 2
Possibility of adding headers to the requests
.SH AUTHORS
Louka.
